id,cve_id,description,published_at,part,last_modified_at,updated_at,cvss_version,cvss_exploitability_score,cvss_impact_score,cvss_vector_string,cvss_attack_vector,cvss_attack_complexity,cvss_privileges_required,cvss_user_interaction,cvss_scope,cvss_confidentiality_impact,cvss_integrity_impact,cvss_availability_impact,cvss_base_score,cvss_base_severity,has_cwe,project,source,release,release_requirements,inherited_from,technical_lag,applicability,cwe_id,start_to_patched,start_to_published,published_to_patched,patched_date,version_end,exclude_version_end,kind,name,abstraction,structure,status,summary,background_details,likelihood_of_exploit,detection_methods,consequences,cves
1711,CVE-2024-24680,"An issue was discovered in Django 3.2 before 3.2.24, 4.2 before 4.2.10, and Django 5.0 before 5.0.2. The intcomma template filter was subject to a potential denial-of-service attack when used with very long strings.",2024-02-06 22:16:00,django.template,2024-02-15 18:46:00,2024-03-19 14:51:31.691131,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,False,django,Direct,django,,,False,"[5.0,5.0.2),[3.2,3.2.24),[4.2,4.2.10)",,64.0,64,-1.0,2024-02-06 14:53:28,5.0.2,True,,,,,,,,,,,
7014,CVE-2023-23969,"In Django 3.2 before 3.2.17, 4.0 before 4.0.9, and 4.1 before 4.1.6, the parsed values of Accept-Language headers are cached in order to avoid repetitive parsing. This leads to a potential denial-of-service vector via excessive memory usage if the raw value of Accept-Language headers is very large.",2023-02-01 19:15:00,-,2023-11-07 04:08:00,2024-03-19 14:55:02.186442,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[4.1,4.1.6),[4.0,4.0.9),[3.2,3.2.17)",CWE-770,182.0,182,-1.0,2023-02-01 09:55:56,4.1.6,True,weakness,Allocation of Resources Without Limits or Throttling,Base,Simple,Incomplete,,,High,Manual Static Analysis (DM-8),DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.),"['CVE-2019-6975', 'CVE-2023-23969', 'CVE-2023-46695']"
7471,CVE-2023-24580,"An issue was discovered in the Multipart Request Parser in Django 3.2 before 3.2.18, 4.0 before 4.0.10, and 4.1 before 4.1.7. Passing certain inputs (e.g., an excessive number of parts) to multipart forms could result in too many open files or memory exhaustion, and provided a potential vector for a denial-of-service attack.",2023-02-15 01:15:00,django.forms,2023-11-07 04:08:00,2024-03-19 14:55:11.256112,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[3.2,3.2.18),[4.0,4.0.10),[4.1,4.1.7)",CWE-400,678.0,679,-1.0,2023-02-14 08:25:28,3.2.18,True,weakness,Uncontrolled Resource Consumption,Class,Simple,Draft,,,High,,"Bypass Protection Mechanism-Other (.); DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.)","['CVE-2019-14232', 'CVE-2019-14233', 'CVE-2023-24580']"
12317,CVE-2023-31047,"In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's ""Uploading multiple files"" documentation suggested otherwise.",2023-05-07 02:15:00,django.forms,2023-11-07 04:14:00,2024-03-19 14:58:31.876818,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[4.0,4.1.9),[3.2,3.2.19),[4.2,4.2.1)",CWE-20,512.0,515,-4.0,2023-05-03 12:58:23,4.1.9,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
15663,CVE-2023-36053,"In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, EmailValidator and URLValidator are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.",2023-07-03 13:15:00,django.core,2023-11-15 03:18:00,2024-03-19 15:00:47.609699,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[4.2,4.2.3),[4.0,4.1.10),[3.2,3.2.20)",CWE-1333,90.0,91,-1.0,2023-07-03 07:57:20,4.2.3,True,weakness,Inefficient Regular Expression Complexity,Base,Simple,Draft,,,High,,DoS: Resource Consumption (CPU) (A.),['CVE-2023-36053']
19161,CVE-2023-41164,"In Django 3.2 before 3.2.21, 4.1 before 4.1.11, and 4.2 before 4.2.5, django.utils.encoding.uri_to_iri() is subject to a potential DoS (denial of service) attack via certain inputs with a very large number of Unicode characters.",2023-11-03 05:15:00,django.utils,2023-12-14 10:15:00,2024-03-19 15:02:08.523751,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[4.2,4.2.5),[4.1,4.1.11),[3.2,3.2.21)",CWE-1284,154.0,213,-60.0,2023-09-04 10:58:22,4.2.5,True,weakness,Improper Validation of Specified Quantity in Input,Base,Simple,Incomplete,,,,,Varies by Context (.),"['CVE-2023-41164', 'CVE-2023-43665']"
20561,CVE-2023-43665,"In Django 3.2 before 3.2.22, 4.1 before 4.1.12, and 4.2 before 4.2.6, the django.utils.text.Truncator chars() and words() methods (when used with html=True) are subject to a potential DoS (denial of service) attack via certain inputs with very long, potentially malformed HTML text. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which are thus also vulnerable. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232.",2023-11-03 05:15:00,django.utils,2023-12-21 22:15:00,2024-03-19 15:02:56.392980,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[4.2,4.2.6),[4.1,4.1.12),[3.2,3.2.22)",CWE-1284,184.0,213,-30.0,2023-10-04 14:58:34,4.2.6,True,weakness,Improper Validation of Specified Quantity in Input,Base,Simple,Incomplete,,,,,Varies by Context (.),"['CVE-2023-41164', 'CVE-2023-43665']"
22296,CVE-2023-46695,"An issue was discovered in Django 3.2 before 3.2.23, 4.1 before 4.1.13, and 4.2 before 4.2.7. The NFKC normalization is slow on Windows. As a consequence, django.contrib.auth.forms.UsernameField is subject to a potential DoS (denial of service) attack via certain inputs with a very large number of Unicode characters.",2023-11-02 06:15:00,django.contrib.auth,2023-12-14 10:15:00,2024-03-19 15:03:40.390738,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[4.2.,4.2.7),[4.1,4.1.13),[3.2,3.2.23)",CWE-770,4915.0,4916,-1.0,2023-11-01 06:59:15,4.2.7,True,weakness,Allocation of Resources Without Limits or Throttling,Base,Simple,Incomplete,,,High,Manual Static Analysis (DM-8),DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.),"['CVE-2019-6975', 'CVE-2023-23969', 'CVE-2023-46695']"
31455,CVE-2022-22818,"The {% debug %} template tag in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2 does not properly encode the current context. This may lead to XSS.",2022-02-03 02:15:00,django.template,2023-11-07 03:43:00,2024-03-19 15:07:50.786386,3.1,2.8,2.7,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[3.2,3.2.12),[4.0,4.0.2),[2.2,2.2.27)",CWE-79,300.0,302,-2.0,2022-02-01 07:56:19,3.2.12,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
32319,CVE-2022-23833,"An issue was discovered in MultiPartParser in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2. Passing certain inputs to multipart forms could result in an infinite loop when parsing files.",2022-02-03 02:15:00,django.forms,2023-11-22 23:15:00,2024-03-19 15:08:12.436531,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[3.2,3.2.12),[4.0,4.0.2),[2.2,2.2.27)",CWE-835,300.0,302,-2.0,2022-02-01 07:56:19,3.2.12,True,weakness,Loop with Unreachable Exit Condition ('Infinite Loop'),Base,Simple,Incomplete,,,,,DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Amplification (A.),['CVE-2022-23833']
35957,CVE-2022-28346,"An issue was discovered in Django 2.2 before 2.2.28, 3.2 before 3.2.13, and 4.0 before 4.0.4. QuerySet.annotate(), aggregate(), and extra() methods are subject to SQL injection in column aliases via a crafted dictionary (with dictionary expansion) as the passed **kwargs.",2022-04-12 05:15:00,django.db,2023-11-07 03:45:00,2024-03-19 15:10:25.381357,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[4.0,4.0.4),[3.2,3.2.13),[2.2,2.2.28)",CWE-89,124.0,125,-1.0,2022-04-11 07:53:01,4.0.4,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
35958,CVE-2022-28347,"A SQL injection issue was discovered in QuerySet.explain() in Django 2.2 before 2.2.28, 3.2 before 3.2.13, and 4.0 before 4.0.4. This occurs by passing a crafted dictionary (with dictionary expansion) as the **options argument, and placing the injection payload in an option name.",2022-04-12 05:15:00,django.db,2023-11-07 03:45:00,2024-03-19 15:10:25.401846,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[4.0,4.0.4),[3.2,3.2.13),[2.2,2.2.28)",CWE-89,124.0,125,-1.0,2022-04-11 07:53:01,4.0.4,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
40495,CVE-2022-34265,An issue was discovered in Django 3.2 before 3.2.14 and 4.0 before 4.0.6. The Trunc() and Extract() database functions are subject to SQL injection if untrusted data is used as a kind/lookup_name value. Applications that constrain the lookup name and kind choice to a known safe list are unaffected.,2022-07-04 16:15:00,django.db,2023-11-07 03:48:00,2024-03-19 15:13:24.281576,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[4.0,4.0.6),[3.2,3.2.14)",CWE-89,208.0,209,-1.0,2022-07-04 07:57:23,4.0.6,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
42181,CVE-2022-36359,An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input.,2022-08-03 14:15:00,django.core,2023-11-07 03:49:00,2024-03-19 15:14:09.512750,3.1,2.8,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,REQUIRED,UNCHANGED,HIGH,HIGH,HIGH,8.8,HIGH,True,django,Direct,django,,,False,"[4.0,4.0.7),[3.2,3.2.15)",CWE-494,238.0,239,-1.0,2022-08-03 07:38:18,4.0.7,True,weakness,Download of Code Without Integrity Check,Base,Simple,Draft,,,Medium,Automated Static Analysis (DM-14); Black Box (DM-11); Manual Analysis (DM-7.4),Execute Unauthorized Code or Commands-Alter Execution Logic-Other (C.I.A.),['CVE-2022-36359']
45693,CVE-2022-41323,"In Django 3.2 before 3.2.16, 4.0 before 4.0.8, and 4.1 before 4.1.2, internationalized URLs were subject to a potential denial of service attack via the locale parameter, which is treated as a regular expression.",2022-10-16 06:15:00,-,2023-11-07 03:52:00,2024-03-19 15:15:57.456696,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,False,django,Direct,django,,,False,"[3.2,3.2.16),[4.1,4.1.2),[4.0,4.0.8)",,545.0,557,-12.0,2022-10-04 07:54:16,3.2.16,True,,,,,,,,,,,
55304,CVE-2021-23336,"The package python/cpython from 0 and before 3.6.13, from 3.7.0 and before 3.7.10, from 3.8.0 and before 3.8.8, from 3.9.0 and before 3.9.2 are vulnerable to Web Cache Poisoning via urllib.parse.parse_qsl and urllib.parse.parse_qs by using a vector called parameter cloaking. When the attacker can separate query parameters using a semicolon (;), they can cause a difference in the interpretation of the request between the proxy (running with default configuration) and the server. This can result in malicious requests being cached as completely safe ones, as the proxy would usually not see the semicolon as a separator, and therefore would not include it in a cache key of an unkeyed parameter.",2021-02-15 13:15:00,-,2023-11-07 03:30:00,2024-03-19 15:22:10.161847,3.1,1.6,4.2,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:H,NETWORK,HIGH,NONE,REQUIRED,UNCHANGED,NONE,LOW,HIGH,5.9,MEDIUM,True,django,Direct,django,,,False,"[3.1,3.1.7),[3.0,3.0.13),[2.2,2.2.19)",CWE-444,199.0,195,3.0,2021-02-19 09:08:09,3.1.7,True,weakness,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),Base,Simple,Incomplete,,,,,Unexpected State-Hide Activities-Bypass Protection Mechanism (I.),['CVE-2021-23336']
59100,CVE-2021-28658,"In Django 2.2 before 2.2.20, 3.0 before 3.0.14, and 3.1 before 3.1.8, MultiPartParser allowed directory traversal via uploaded files with suitably crafted file names. Built-in upload handlers were not affected by this vulnerability.",2021-04-06 15:15:00,django.http,2023-11-07 03:32:00,2024-03-19 15:23:53.516946,3.1,3.9,1.4,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,LOW,NONE,NONE,5.3,MEDIUM,True,django,Direct,django,,,False,"[3.1,3.1.8),[3.0,3.0.14),[2.2,2.2.20)",CWE-22,244.0,245,-1.0,2021-04-06 07:34:59,3.1.8,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
61123,CVE-2021-31542,"In Django 2.2 before 2.2.21, 3.1 before 3.1.9, and 3.2 before 3.2.1, MultiPartParser, UploadedFile, and FieldFile allowed directory traversal via uploaded files with suitably crafted file names.",2021-05-05 15:15:00,django.http,2023-12-07 22:15:00,2024-03-19 15:25:35.377520,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[3.2,3.2.1),[3.1,3.1.9),[2.2,2.2.21)",CWE-22,27.0,29,-2.0,2021-05-04 08:47:40,3.2.1,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
61512,CVE-2021-32052,"In Django 2.2 before 2.2.22, 3.1 before 3.1.10, and 3.2 before 3.2.2 (with Python 3.9.5+), URLValidator does not prohibit newlines and tabs (unless the URLField form field is used). If an application uses values with newlines in an HTTP response, header injection can occur. Django itself is unaffected because HttpResponse prohibits newlines in HTTP headers.",2021-05-06 16:15:00,django.core,2023-11-07 03:35:00,2024-03-19 15:25:43.885065,3.1,2.8,2.7,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[2.2,2.2.22),[3.1,3.1.10),[3.2,3.2.2)",CWE-79,765.0,766,-1.0,2021-05-06 07:40:38,2.2.22,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
61986,CVE-2021-3281,"In Django 2.2 before 2.2.18, 3.0 before 3.0.12, and 3.1 before 3.1.6, the django.utils.archive.extract method (used by ""startapp --template"" and ""startproject --template"") allows directory traversal via an archive with absolute paths or relative paths with dot segments.",2021-02-02 07:15:00,django.utils,2023-11-07 03:37:00,2024-03-19 15:25:53.231017,3.1,3.9,1.4,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,LOW,NONE,5.3,MEDIUM,True,django,Direct,django,,,False,"[3.1,3.1.6),[3.0,3.0.12),[2.2,2.2.18)",CWE-22,181.0,181,-1.0,2021-02-01 09:28:24,3.1.6,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
62277,CVE-2021-33203,"Django before 2.2.24, 3.x before 3.1.12, and 3.2.x before 3.2.4 has a potential directory traversal via django.contrib.admindocs. Staff members could use the TemplateDetailView view to check the existence of arbitrary files. Additionally, if (and only if) the default admindocs templates have been customized by application developers to also show file contents, then not only the existence but also the file contents would have been exposed. In other words, there is directory traversal outside of the template root directories.",2021-06-08 18:15:00,django.contrib,2023-11-07 03:35:00,2024-03-19 15:26:10.616385,3.1,1.2,3.6,CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,HIGH,NONE,UNCHANGED,HIGH,NONE,NONE,4.9,MEDIUM,True,django,Direct,django,,,False,"[3.2.0,3.2.4),[3.0.0,3.1.12),[1.2,2.2.24)",CWE-22,4033.0,4039,-7.0,2021-06-02 08:54:01,3.2.4,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
62517,CVE-2021-33571,"In Django 2.2 before 2.2.24, 3.x before 3.1.12, and 3.2 before 3.2.4, URLValidator, validate_ipv4_address, and validate_ipv46_address do not prohibit leading zero characters in octal literals. This may allow a bypass of access control that is based on IP addresses. (validate_ipv4_address and validate_ipv46_address are unaffected with Python 3.9.5+..) .",2021-06-08 18:15:00,django.core,2023-12-07 22:15:00,2024-03-19 15:26:17.723987,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,HIGH,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[3.2,3.2.4),[3.0,3.1.12),[2.2,2.2.24)",CWE-918,56.0,63,-7.0,2021-06-02 08:54:01,3.2.4,True,weakness,Server-Side Request Forgery (SSRF),Base,Simple,Incomplete,,,,Automated Static Analysis (DM-14),Execute Unauthorized Code or Commands (I.); Read Application Data (C.),['CVE-2021-33571']
63633,CVE-2021-35042,Django 3.1.x before 3.1.13 and 3.2.x before 3.2.5 allows QuerySet.order_by SQL injection if order_by is untrusted input from a client of a web application.,2021-07-02 10:15:00,django.db,2023-11-07 03:36:00,2024-03-19 15:26:49.316323,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[3.2,3.2.5),[3.1,3.1.13)",CWE-89,85.0,87,-2.0,2021-07-01 07:40:00,3.2.5,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
70436,CVE-2021-44420,"In Django 2.2 before 2.2.25, 3.1 before 3.1.14, and 3.2 before 3.2.10, HTTP requests for URLs with trailing newlines could bypass upstream access control based on URL paths.",2021-12-08 00:15:00,-,2023-11-07 03:39:00,2024-03-19 15:30:04.239098,3.1,3.9,3.4,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L,NETWORK,LOW,NONE,NONE,UNCHANGED,LOW,LOW,LOW,7.3,HIGH,False,django,Direct,django,,,False,"[2.2,2.2.25),[3.1,3.1.14),[3.2,3.2.10)",,980.0,981,-1.0,2021-12-07 07:34:42,2.2.25,True,,,,,,,,,,,
70840,CVE-2021-45115,"An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. UserAttributeSimilarityValidator incurred significant overhead in evaluating a submitted password that was artificially large in relation to the comparison values. In a situation where access to user registration was unrestricted, this provided a potential vector for a denial-of-service attack.",2022-01-05 00:15:00,django.core,2023-11-07 03:39:00,2024-03-19 15:30:16.708582,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,False,django,Direct,django,,,False,"[2.2,2.2.26),[3.2,3.2.11),[4.0,4.0.1)",,1008.0,1009,-1.0,2022-01-04 09:53:18,2.2.26,True,,,,,,,,,,,
70841,CVE-2021-45116,"An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language's variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key.",2022-01-05 00:15:00,django.template,2023-11-07 03:39:00,2024-03-19 15:30:16.726108,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[2.2,2.2.26),[3.2,3.2.11),[4.0,4.0.1)",CWE-20,1008.0,1009,-1.0,2022-01-04 09:53:18,2.2.26,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
70941,CVE-2021-45452,"Storage.save in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1 allows directory traversal if crafted filenames are directly passed to it.",2022-01-05 00:15:00,django.core,2023-11-07 03:39:00,2024-03-19 15:30:18.634276,3.1,3.9,1.4,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,LOW,NONE,NONE,5.3,MEDIUM,True,django,Direct,django,,,False,"[2.2,2.2.26),[3.2,3.2.11),[4.0,4.0.1)",CWE-22,1008.0,1009,-1.0,2022-01-04 09:53:18,2.2.26,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
75539,CVE-2020-13254,"An issue was discovered in Django 2.2 before 2.2.13 and 3.0 before 3.0.7. In cases where a memcached backend does not perform key validation, passing malformed cache keys could result in a key collision, and potential data leakage.",2020-06-03 14:15:00,django.core,2023-11-07 03:16:00,2024-03-19 15:36:44.794497,3.1,2.2,3.6,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,HIGH,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,5.9,MEDIUM,True,django,Direct,django,,,False,"[3.0,3.0.7),[2.2,2.2.13)",CWE-295,183.0,184,-1.0,2020-06-03 09:36:35,3.0.7,True,weakness,Improper Certificate Validation,Base,Simple,Draft,,{'Background_Detail': 'A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.'},,,Bypass Protection Mechanism-Gain Privileges or Assume Identity (I.),['CVE-2020-13254']
75862,CVE-2020-13596,"An issue was discovered in Django 2.2 before 2.2.13 and 3.0 before 3.0.7. Query parameters generated by the Django admin ForeignKeyRawIdWidget were not properly URL encoded, leading to a possibility of an XSS attack.",2020-06-03 14:15:00,django.contrib,2023-11-07 03:16:00,2024-03-19 15:36:51.153608,3.1,2.8,2.7,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[3.0,3.0.7),[2.2,2.2.13)",CWE-79,183.0,184,-1.0,2020-06-03 09:36:35,3.0.7,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
81114,CVE-2020-24583,"An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). FILE_UPLOAD_DIRECTORY_PERMISSIONS mode was not applied to intermediate-level directories created in the process of uploading files. It was also not applied to intermediate-level collected static directories when using the collectstatic management command.",2020-09-01 13:15:00,django.core,2023-11-07 03:20:00,2024-03-19 15:38:51.271683,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[3.1,3.1.1),[3.0,3.0.10),[2.2,2.2.16)",CWE-276,28.0,28,-1.0,2020-09-01 09:14:32,3.1.1,True,weakness,Incorrect Default Permissions,Base,Simple,Draft,,,Medium,,Read Application Data-Modify Application Data (C.I.),"['CVE-2019-19118', 'CVE-2020-24583', 'CVE-2020-24584']"
81115,CVE-2020-24584,"An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). The intermediate-level directories of the filesystem cache had the system's standard umask rather than 0o077.",2020-09-01 13:15:00,django.core,2023-11-07 03:20:00,2024-03-19 15:38:51.296022,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[3.1,3.1.1),[3.0,3.0.10),[2.2,2.2.16)",CWE-276,28.0,28,-1.0,2020-09-01 09:14:32,3.1.1,True,weakness,Incorrect Default Permissions,Base,Simple,Draft,,,Medium,,Read Application Data-Modify Application Data (C.I.),"['CVE-2019-19118', 'CVE-2020-24583', 'CVE-2020-24584']"
88741,CVE-2020-7471,"Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.",2020-02-03 12:15:00,django.contrib,2023-11-07 03:26:00,2024-03-19 15:42:17.200540,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[3.0,3.0.3),[2.2,2.2.10),[1.11,1.11.28)",CWE-89,62.0,63,-1.0,2020-02-03 09:50:46,3.0.3,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
90248,CVE-2020-9402,"Django 1.11 before 1.11.29, 2.2 before 2.2.11, and 3.0 before 3.0.4 allows SQL Injection if untrusted data is used as a tolerance parameter in GIS functions and aggregates on Oracle. By passing a suitably crafted tolerance to GIS functions and aggregates on Oracle, it was possible to break escaping and inject malicious SQL.",2020-03-05 15:15:00,-,2023-11-07 03:26:00,2024-03-19 15:42:58.486579,3.1,2.8,5.9,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,LOW,NONE,UNCHANGED,HIGH,HIGH,HIGH,8.8,HIGH,True,django,Direct,django,,,False,"[3.0,3.0.4),[2.2,2.2.11),[1.11,1.11.29)",CWE-89,92.0,94,-2.0,2020-03-04 09:31:56,3.0.4,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
93863,CVE-2019-12308,"An issue was discovered in Django 1.11 before 1.11.21, 2.1 before 2.1.9, and 2.2 before 2.2.2. The clickable Current URL value displayed by the AdminURLFieldWidget displays the provided value without validating it as a safe URL. Thus, an unvalidated value stored in the database, or a value provided as a URL query parameter payload, could result in an clickable JavaScript link.",2019-06-03 17:29:00,django.contrib,2023-11-07 03:03:00,2024-03-19 16:26:50.785850,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[2.2,2.2.2),[2.1,2.1.9),[1.11,1.11.21)",CWE-79,62.0,63,-1.0,2019-06-03 10:11:10,2.2.2,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
94296,CVE-2019-12781,"An issue was discovered in Django 1.11 before 1.11.22, 2.1 before 2.1.10, and 2.2 before 2.2.3. An HTTP request is not redirected to HTTPS when the SECURE_PROXY_SSL_HEADER and SECURE_SSL_REDIRECT settings are used, and the proxy connects to Django via HTTPS. In other words, django.http.HttpRequest.scheme has incorrect behavior when a client uses HTTP.",2019-07-01 14:15:00,django.http,2023-11-07 03:03:00,2024-03-19 16:27:00.989295,3.0,3.9,1.4,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,LOW,NONE,NONE,5.3,MEDIUM,True,django,Direct,django,,,False,"[1.11,1.11.22),[2.1,2.1.10),[2.2,2.2.3)",CWE-319,817.0,817,-1.0,2019-07-01 07:19:13,1.11.22,True,weakness,Cleartext Transmission of Sensitive Information,Base,Simple,Draft,,,High,Automated Static Analysis (DM-14); Black Box (DM-11),Read Application Data-Modify Files or Directories (C.I.),['CVE-2019-12781']
95453,CVE-2019-14232,"An issue was discovered in Django 1.11.x before 1.11.23, 2.1.x before 2.1.11, and 2.2.x before 2.2.4. If django.utils.text.Truncator's chars() and words() methods were passed the html=True argument, they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which were thus vulnerable.",2019-08-02 15:15:00,django.utils,2023-11-07 03:04:00,2024-03-19 16:27:47.575288,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[2.2,2.2.4),[2.1,2.1.11),[1.11,1.11.23)",CWE-400,121.0,123,-2.0,2019-08-01 09:04:37,2.2.4,True,weakness,Uncontrolled Resource Consumption,Class,Simple,Draft,,,High,,"Bypass Protection Mechanism-Other (.); DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.)","['CVE-2019-14232', 'CVE-2019-14233', 'CVE-2023-24580']"
95454,CVE-2019-14233,"An issue was discovered in Django 1.11.x before 1.11.23, 2.1.x before 2.1.11, and 2.2.x before 2.2.4. Due to the behaviour of the underlying HTMLParser, django.utils.html.strip_tags would be extremely slow to evaluate certain inputs containing large sequences of nested incomplete HTML entities.",2019-08-02 15:15:00,django.utils,2023-11-07 03:04:00,2024-03-19 16:27:47.596471,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[2.2,2.2.4),[2.1,2.1.11),[1.11,1.11.23)",CWE-400,121.0,123,-2.0,2019-08-01 09:04:37,2.2.4,True,weakness,Uncontrolled Resource Consumption,Class,Simple,Draft,,,High,,"Bypass Protection Mechanism-Other (.); DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.)","['CVE-2019-14232', 'CVE-2019-14233', 'CVE-2023-24580']"
95455,CVE-2019-14234,"An issue was discovered in Django 1.11.x before 1.11.23, 2.1.x before 2.1.11, and 2.2.x before 2.2.4. Due to an error in shallow key transformation, key and index lookups for django.contrib.postgres.fields.JSONField, and key lookups for django.contrib.postgres.fields.HStoreField, were subject to SQL injection. This could, for example, be exploited via crafted use of ""OR 1=1"" in a key or index name to return all records, using a suitably crafted dictionary, with dictionary expansion, as the **kwargs passed to the QuerySet.filter() function.",2019-08-09 13:15:00,django.contrib,2023-11-07 03:04:00,2024-03-19 16:27:47.617661,3.0,3.9,5.9,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[2.2,2.2.4),[2.1,2.1.11),[1.11,1.11.23)",CWE-89,121.0,130,-9.0,2019-08-01 09:04:37,2.2.4,True,weakness,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),Base,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),Bypass Protection Mechanism (.); Bypass Protection Mechanism (.); Modify Application Data (I.); Read Application Data (C.),"['CVE-2019-14234', 'CVE-2020-7471', 'CVE-2020-9402', 'CVE-2021-35042', 'CVE-2022-28346', 'CVE-2022-28347', 'CVE-2022-34265']"
95456,CVE-2019-14235,"An issue was discovered in Django 1.11.x before 1.11.23, 2.1.x before 2.1.11, and 2.2.x before 2.2.4. If passed certain inputs, django.utils.encoding.uri_to_iri could lead to significant memory usage due to a recursion when repercent-encoding invalid UTF-8 octet sequences.",2019-08-02 15:15:00,django.utils,2023-11-07 03:04:00,2024-03-19 16:27:47.642582,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[2.2,2.2.4),[2.1,2.1.11),[1.11,1.11.23)",CWE-674,121.0,123,-2.0,2019-08-01 09:04:37,2.2.4,True,weakness,Uncontrolled Recursion,Class,Simple,Draft,,,,Automated Static Analysis (DM-14),DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Read Application Data (C.),['CVE-2019-14235']
99049,CVE-2019-19118,"Django 2.1 before 2.1.15 and 2.2 before 2.2.8 allows unintended model editing. A Django model admin displaying inline related models, where the user has view-only permissions to a parent model but edit permissions to the inline model, would be presented with an editing UI, allowing POST requests, for updating the inline model. Directly editing the view-only parent model was not possible, but the parent model's save() method was called, triggering potential side effects, and causing pre and post-save signal handlers to be invoked. (To resolve this, the Django admin is adjusted to require edit permissions on the parent model in order for inline models to be editable.)",2019-12-02 14:15:00,-,2023-11-07 03:07:00,2024-03-19 16:29:29.849423,3.1,2.8,3.6,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N,NETWORK,LOW,LOW,NONE,UNCHANGED,NONE,HIGH,NONE,6.5,MEDIUM,True,django,Direct,django,,,False,"[2.1,2.1.15),[2.2,2.2.8)",CWE-276,487.0,488,-1.0,2019-12-02 08:57:47,2.1.15,True,weakness,Incorrect Default Permissions,Base,Simple,Draft,,,Medium,,Read Application Data-Modify Application Data (C.I.),"['CVE-2019-19118', 'CVE-2020-24583', 'CVE-2020-24584']"
99621,CVE-2019-19844,"Django before 1.11.27, 2.x before 2.2.9, and 3.x before 3.0.1 allows account takeover. A suitably crafted email address (that is equal to an existing user's email address after case transformation of Unicode characters) would allow an attacker to be sent a password reset token for the matched user account. (One mitigation in the new releases is to send password reset tokens only to the registered user email address.)",2019-12-18 19:15:00,-,2023-11-07 03:07:00,2024-03-19 16:29:45.651866,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[2.2,2.2.9),[1.2,1.11.27),[3.0,3.0.1)",CWE-640,260.0,261,-1.0,2019-12-18 08:59:07,2.2.9,True,weakness,Weak Password Recovery Mechanism for Forgotten Password,Base,Simple,Incomplete,,,High,,DoS: Resource Consumption (Other) (A.); Gain Privileges or Assume Identity (.); Other (I.),['CVE-2019-19844']
101578,CVE-2019-3498,"In Django 1.11.x before 1.11.18, 2.0.x before 2.0.10, and 2.1.x before 2.1.5, an Improper Neutralization of Special Elements in Output Used by a Downstream Component issue exists in django.views.defaults.page_not_found(), leading to content spoofing (in a 404 error page) if a user fails to recognize that a crafted URL has malicious content.",2019-01-09 23:29:00,django.views,2023-11-07 03:09:00,2024-03-19 16:30:43.988698,3.0,2.8,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N,NETWORK,LOW,NONE,REQUIRED,UNCHANGED,NONE,HIGH,NONE,6.5,MEDIUM,True,django,Direct,django,,,False,"[1.11,1.11.18),[2.0,2.0.10),[2.1,2.1.5)",CWE-74,639.0,645,-6.0,2019-01-04 14:10:44,1.11.18,True,weakness,Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),Class,Simple,Incomplete,,,High,Automated Static Analysis (DM-14),Alter Execution Logic (.); Bypass Protection Mechanism (.); Hide Activities (.); Other (I.); Read Application Data (C.),['CVE-2019-3498']
103870,CVE-2019-6975,"Django 1.11.x before 1.11.19, 2.0.x before 2.0.11, and 2.1.x before 2.1.6 allows Uncontrolled Memory Consumption via a malicious attacker-supplied value to the django.utils.numberformat.format() function.",2019-02-11 13:29:00,django.utils,2023-11-07 03:13:00,2024-03-19 16:31:57.678785,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Direct,django,,,False,"[1.11.0,1.11.19),[2.0.0,2.0.11),[2.1.0,2.1.6)",CWE-770,,3191,,,1.11.19,True,weakness,Allocation of Resources Without Limits or Throttling,Base,Simple,Incomplete,,,High,Manual Static Analysis (DM-8),DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.),"['CVE-2019-6975', 'CVE-2023-23969', 'CVE-2023-46695']"
111460,CVE-2018-14574,django.middleware.common.CommonMiddleware in Django 1.11.x before 1.11.15 and 2.0.x before 2.0.8 has an Open Redirect.,2018-08-03 17:29:00,django.middleware,2019-03-01 19:32:00,2024-03-19 16:35:11.255143,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[2.0,2.0.8),[1.11,1.11.15)",CWE-601,241.0,244,-3.0,2018-08-01 13:51:58,2.0.8,True,weakness,URL Redirection to Untrusted Site ('Open Redirect'),Base,Simple,Draft,,{'Background_Detail': 'Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.'},Low,Automated Static Analysis (DM-14); Manual Static Analysis (DM-10),Bypass Protection Mechanism-Gain Privileges or Assume Identity (.); Bypass Protection Mechanism-Gain Privileges or Assume Identity-Other (C.),"['CVE-2017-7233', 'CVE-2017-7234', 'CVE-2018-14574']"
113314,CVE-2018-16984,"An issue was discovered in Django 2.1 before 2.1.2, in which unprivileged users can read the password hashes of arbitrary accounts. The read-only password widget used by the Django Admin to display an obfuscated password hash was bypassed if a user has only the ""view"" permission (new in Django 2.1), resulting in display of the entire password hash to those users. This may result in a vulnerability for sites with legacy user accounts using insecure hashes.",2018-10-02 18:29:00,-,2019-10-03 00:03:00,2024-03-19 16:35:54.588561,3.0,1.2,3.6,CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,HIGH,NONE,UNCHANGED,HIGH,NONE,NONE,4.9,MEDIUM,True,django,Direct,django,,,False,"[2.1,2.1.2)",CWE-522,60.0,62,-2.0,2018-10-01 09:22:12,2.1.2,True,weakness,Insufficiently Protected Credentials,Class,Simple,Incomplete,,,,Automated Static Analysis (DM-14),Gain Privileges or Assume Identity (.),['CVE-2018-16984']
119588,CVE-2018-6188,"django.contrib.auth.forms.AuthenticationForm in Django 2.0 before 2.0.2, and 1.11.8 and 1.11.9, allows remote attackers to obtain potentially sensitive information by leveraging data exposure from the confirm_login_allowed() method, as demonstrated by discovering whether a user account is inactive.",2018-02-05 03:29:00,django.contrib,2019-03-12 17:54:00,2024-03-19 16:38:30.653600,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[1.11.8,1.11.10),[2.0,2.0.2)",CWE-200,61.0,64,-4.0,2018-02-01 14:40:14,1.11.10,True,weakness,Exposure of Sensitive Information to an Unauthorized Actor,Class,Simple,Draft,,,High,,Read Application Data (C.),"['CVE-2013-0305', 'CVE-2015-8213', 'CVE-2016-2513', 'CVE-2018-6188']"
120487,CVE-2018-7536,"An issue was discovered in Django 2.0 before 2.0.3, 1.11 before 1.11.11, and 1.8 before 1.8.19. The django.utils.html.urlize() function was extremely slow to evaluate certain inputs due to catastrophic backtracking vulnerabilities in two regular expressions (only one regular expression for Django 1.8.x). The urlize() function is used to implement the urlize and urlizetrunc template filters, which were thus vulnerable.",2018-03-09 20:29:00,django.utils,2023-12-07 22:15:00,2024-03-19 16:38:51.584540,3.0,3.9,1.4,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,LOW,5.3,MEDIUM,True,django,Direct,django,,,False,"[1.8,1.8.19),[1.11,1.11.11),[2.0,2.0.3)",CWE-185,1069.0,1073,-4.0,2018-03-06 14:22:46,1.8.19,True,weakness,Incorrect Regular Expression,Class,Simple,Draft,,,,Automated Static Analysis (DM-14),Bypass Protection Mechanism (.); Unexpected State-Varies by Context (.),"['CVE-2018-7536', 'CVE-2018-7537']"
120488,CVE-2018-7537,"An issue was discovered in Django 2.0 before 2.0.3, 1.11 before 1.11.11, and 1.8 before 1.8.19. If django.utils.text.Truncator's chars() and words() methods were passed the html=True argument, they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which were thus vulnerable.",2018-03-09 20:29:00,django.utils,2019-02-28 22:37:00,2024-03-19 16:38:51.608965,3.0,3.9,1.4,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,LOW,5.3,MEDIUM,True,django,Direct,django,,,False,"[1.8,1.8.19),[1.11,1.11.11),[2.0,2.0.3)",CWE-185,1069.0,1073,-4.0,2018-03-06 14:22:46,1.8.19,True,weakness,Incorrect Regular Expression,Class,Simple,Draft,,,,Automated Static Analysis (DM-14),Bypass Protection Mechanism (.); Unexpected State-Varies by Context (.),"['CVE-2018-7536', 'CVE-2018-7537']"
125614,CVE-2017-12794,"In Django 1.10.x before 1.10.8 and 1.11.x before 1.11.5, HTML autoescaping was disabled in a portion of the template for the technical 500 debug page. Given the right circumstances, this allowed a cross-site scripting attack. This vulnerability shouldn't affect most production sites since you shouldn't run with ""DEBUG = True"" (which makes this page accessible) in your production settings.",2017-09-07 13:29:00,-,2018-03-16 01:29:00,2024-03-19 16:40:55.283196,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[1.10.0,1.10),[1.10.1,1.10.8),[1.11.1,1.11.5)",CWE-79,2267.0,2669,-402.0,2016-08-01 18:32:07,1.10,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
134245,CVE-2017-7233,"Django 1.10 before 1.10.7, 1.9 before 1.9.13, and 1.8 before 1.8.18 relies on user input in some cases to redirect the user to an ""on success"" URL. The security check for these redirects (namely ``django.utils.http.is_safe_url()``) considered some numeric URLs ""safe"" when they shouldn't be, aka an open redirect vulnerability. Also, if a developer relies on ``is_safe_url()`` to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack.",2017-04-04 17:59:00,django.utils,2018-10-17 10:29:00,2024-03-19 16:45:13.555208,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[1.8.0,1.8),[1.8.1,1.8.18),[1.9,1.9.13),[1.10.1,1.10.7)",CWE-601,1780.0,2513,-734.0,2015-04-01 20:12:37,1.8,True,weakness,URL Redirection to Untrusted Site ('Open Redirect'),Base,Simple,Draft,,{'Background_Detail': 'Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.'},Low,Automated Static Analysis (DM-14); Manual Static Analysis (DM-10),Bypass Protection Mechanism-Gain Privileges or Assume Identity (.); Bypass Protection Mechanism-Gain Privileges or Assume Identity-Other (C.),"['CVE-2017-7233', 'CVE-2017-7234', 'CVE-2018-14574']"
134246,CVE-2017-7234,"A maliciously crafted URL to a Django (1.10 before 1.10.7, 1.9 before 1.9.13, and 1.8 before 1.8.18) site using the ``django.views.static.serve()`` view could redirect to any other domain, aka an open redirect vulnerability.",2017-04-04 17:59:00,django.views,2017-11-04 01:29:00,2024-03-19 16:45:13.612297,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[1.8.0,1.8),[1.8.1,1.8.18),[1.9,1.9.13),[1.10.1,1.10.7)",CWE-601,1780.0,2513,-734.0,2015-04-01 20:12:37,1.8,True,weakness,URL Redirection to Untrusted Site ('Open Redirect'),Base,Simple,Draft,,{'Background_Detail': 'Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.'},Low,Automated Static Analysis (DM-14); Manual Static Analysis (DM-10),Bypass Protection Mechanism-Gain Privileges or Assume Identity (.); Bypass Protection Mechanism-Gain Privileges or Assume Identity-Other (C.),"['CVE-2017-7233', 'CVE-2017-7234', 'CVE-2018-14574']"
139730,CVE-2016-2048,"Django 1.9.x before 1.9.2, when ModelAdmin.save_as is set to True, allows remote authenticated users to bypass intended access restrictions and create ModelAdmin objects via the ""Save as New"" option when editing objects and leveraging the ""change"" permission.",2016-02-08 19:59:00,django.contrib,2016-11-28 20:02:00,2024-03-19 16:47:34.817796,3.0,1.2,4.2,CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:H/A:N,NETWORK,LOW,HIGH,NONE,UNCHANGED,LOW,HIGH,NONE,5.5,MEDIUM,True,django,Direct,django,,,False,"[1.9,1.9.2)",CWE-284,61.0,68,-8.0,2016-02-01 17:17:18,1.9.2,True,weakness,Improper Access Control,Pillar,Simple,Incomplete,,,,,Varies by Context (.),['CVE-2016-2048']
140115,CVE-2016-2512,"The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\@attacker.com.",2016-04-08 15:59:00,django.utils,2017-09-08 01:29:00,2024-03-19 16:47:46.420635,3.0,2.8,4.0,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,NONE,HIGH,NONE,7.4,HIGH,True,django,Direct,django,,,False,"[1.8.9,1.8.10),[1.9,1.9.3)",CWE-79,28.0,66,-38.0,2016-03-01 17:10:07,1.8.10,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
140116,CVE-2016-2513,The password hasher in contrib/auth/hashers.py in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to enumerate users via a timing attack involving login requests.,2016-04-08 15:59:00,django.contrib,2017-09-08 01:29:00,2024-03-19 16:47:46.439159,3.0,1.6,1.4,CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N,NETWORK,HIGH,NONE,REQUIRED,UNCHANGED,LOW,NONE,NONE,3.1,LOW,True,django,Direct,django,,,False,"[1.8.9,1.8.10),[1.9,1.9.3)",CWE-200,28.0,66,-38.0,2016-03-01 17:10:07,1.8.10,True,weakness,Exposure of Sensitive Information to an Unauthorized Actor,Class,Simple,Draft,,,High,,Read Application Data (C.),"['CVE-2013-0305', 'CVE-2015-8213', 'CVE-2016-2513', 'CVE-2018-6188']"
143160,CVE-2016-6186,"Cross-site scripting (XSS) vulnerability in the dismissChangeRelatedObjectPopup function in contrib/admin/static/admin/js/admin/RelatedObjectLookups.js in Django before 1.8.14, 1.9.x before 1.9.8, and 1.10.x before 1.10rc1 allows remote attackers to inject arbitrary web script or HTML via vectors involving unsafe usage of Element.innerHTML.",2016-08-05 15:59:00,django.contrib,2023-11-07 02:33:00,2024-03-19 16:49:04.802984,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,django,Direct,django,,,False,"[1.2,1.8.13],[1.9.0,1.9.8),[1.10,1.10.1)",CWE-79,2253.0,2271,-18.0,2016-07-18 18:38:12,1.8.13,False,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
144154,CVE-2016-7401,"The cookie parsing code in Django before 1.8.15 and 1.9.x before 1.9.10, when used on a site with Google Analytics, allows remote attackers to bypass an intended CSRF protection mechanism by setting arbitrary cookies.",2016-10-03 18:59:00,-,2018-01-05 02:31:00,2024-03-19 16:49:35.492183,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,HIGH,NONE,7.5,HIGH,True,django,Direct,django,,,False,"[1.2,1.8.14],[1.9.0,1.9),[1.9.1,1.9.10)",CWE-254,2323.0,2330,-8.0,2016-09-26 18:30:16,1.8.14,False,category,7PK - Security Features,,,Incomplete,,,,,,['CVE-2016-7401']
145231,CVE-2016-9013,"Django 1.8.x before 1.8.16, 1.9.x before 1.9.11, and 1.10.x before 1.10.3 use a hardcoded password for a temporary database user created when running tests with an Oracle database, which makes it easier for remote attackers to obtain access to the database server by leveraging failure to manually specify a password in the database settings TEST dictionary.",2016-12-09 20:59:00,-,2023-11-07 02:36:00,2024-03-19 16:50:05.592469,3.0,3.9,5.9,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,django,Direct,django,,,False,"[1.8,1.8.16),[1.9,1.9.11),[1.10,1.10.3)",CWE-798,579.0,618,-39.0,2016-11-01 14:09:28,1.8.16,True,weakness,Use of Hard-coded Credentials,Base,Simple,Draft,,,High,,Bypass Protection Mechanism (.); Read Application Data-Gain Privileges or Assume Identity-Execute Unauthorized Code or Commands-Other (C.I.A.),['CVE-2016-9013']
145232,CVE-2016-9014,"Django before 1.8.x before 1.8.16, 1.9.x before 1.9.11, and 1.10.x before 1.10.3, when settings.DEBUG is True, allow remote attackers to conduct DNS rebinding attacks by leveraging failure to validate the HTTP Host header against settings.ALLOWED_HOSTS.",2016-12-09 20:59:00,-,2023-11-07 02:36:00,2024-03-19 16:50:05.636314,3.0,2.2,5.9,CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,HIGH,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,8.1,HIGH,True,django,Direct,django,,,False,"[1.8,1.8.16),[1.9,1.9.11),[1.10,1.10.3)",,579.0,618,-39.0,2016-11-01 14:09:28,1.8.16,True,,,,,,,,,,,
146140,CVE-2015-0219,"Django before 1.4.18, 1.6.x before 1.6.10, and 1.7.x before 1.7.3 allows remote attackers to spoof WSGI headers by using an _ (underscore) character instead of a - (dash) character in an HTTP header, as demonstrated by an X-Auth_User header.",2015-01-16 16:59:00,-,2016-12-22 02:59:00,2024-03-19 16:50:32.063308,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,PARTIAL,NONE,5.0,,True,django,Direct,django,,,False,"[1.2,1.4.17],[1.6,1.6.10),[1.7,1.7.3)",,1701.0,1704,-3.0,2015-01-13 18:54:01,1.4.17,False,,,,,,,,,,,
146141,CVE-2015-0220,"The django.util.http.is_safe_url function in Django before 1.4.18, 1.6.x before 1.6.10, and 1.7.x before 1.7.3 does not properly handle leading whitespaces, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a crafted URL, related to redirect URLs, as demonstrated by a ""\njavascript:"" URL.",2015-01-16 16:59:00,django.util,2016-12-22 02:59:00,2024-03-19 16:50:32.089111,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.2,1.4.17],[1.6,1.6.10),[1.7,1.7.3)",CWE-79,1701.0,1704,-3.0,2015-01-13 18:54:01,1.4.17,False,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
146142,CVE-2015-0221,"The django.views.static.serve view in Django before 1.4.18, 1.6.x before 1.6.10, and 1.7.x before 1.7.3 reads files an entire line at a time, which allows remote attackers to cause a denial of service (memory consumption) via a long line in a file.",2015-01-16 16:59:00,django.views,2016-12-22 02:59:00,2024-03-19 16:50:32.118295,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.2,1.4.17],[1.6,1.6.10),[1.7,1.7.3)",CWE-399,1701.0,1704,-3.0,2015-01-13 18:54:01,1.4.17,False,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
146143,CVE-2015-0222,"ModelMultipleChoiceField in Django 1.6.x before 1.6.10 and 1.7.x before 1.7.3, when show_hidden_initial is set to True, allows remote attackers to cause a denial of service by submitting duplicate values, which triggers a large number of SQL queries.",2015-01-16 16:59:00,django.db,2016-12-22 02:59:00,2024-03-19 16:50:32.147949,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.2,1.4.17],[1.6,1.6.10),[1.7,1.7.3)",,1701.0,1704,-3.0,2015-01-13 18:54:01,1.4.17,False,,,,,,,,,,,
148085,CVE-2015-2241,"Cross-site scripting (XSS) vulnerability in the contents function in admin/helpers.py in Django before 1.7.6 and 1.8 before 1.8b2 allows remote attackers to inject arbitrary web script or HTML via a model attribute in ModelAdmin.readonly_fields, as demonstrated by a @property.",2015-03-12 14:59:00,django.contrib,2016-12-03 03:04:00,2024-03-19 16:51:22.186639,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.2,1.7.5],[1.8,1.8.1)",CWE-79,1756.0,1759,-3.0,2015-03-09 15:30:40,1.7.5,False,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
148139,CVE-2015-2316,"The utils.html.strip_tags function in Django 1.6.x before 1.6.11, 1.7.x before 1.7.7, and 1.8.x before 1.8c1, when using certain versions of Python, allows remote attackers to cause a denial of service (infinite loop) by increasing the length of the input string.",2015-03-25 14:59:00,django.utils,2018-10-30 16:27:00,2024-03-19 16:51:23.555781,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.6,1.6.11),[1.7,1.7.7)",CWE-399,497.0,503,-7.0,2015-03-18 23:57:46,1.6.11,True,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
148140,CVE-2015-2317,"The utils.http.is_safe_url function in Django before 1.4.20, 1.5.x, 1.6.x before 1.6.11, 1.7.x before 1.7.7, and 1.8.x before 1.8c1 does not properly validate URLs, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a control character in a URL, as demonstrated by a \x08javascript: URL.",2015-03-25 14:59:00,django.utils,2018-10-30 16:27:00,2024-03-19 16:51:23.603110,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.2,1.4.19],[1.5,1.6.11),[1.7,1.7.7)",CWE-79,1766.0,1772,-7.0,2015-03-19 00:03:58,1.4.19,False,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
149464,CVE-2015-3982,"The session.flush function in the cached_db backend in Django 1.8.x before 1.8.2 does not properly flush the session, which allows remote attackers to hijack user sessions via an empty string in the session key.",2015-06-02 14:59:00,django.contrib,2016-12-06 03:01:00,2024-03-19 16:51:57.176319,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,PARTIAL,NONE,5.0,,False,django,Direct,django,,,False,"[1.8.0,1.8),[1.8.1,1.8.2)",,1780.0,1841,-62.0,2015-04-01 20:12:37,1.8,True,,,,,,,,,,,
150408,CVE-2015-5143,"The session backends in Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 allows remote attackers to cause a denial of service (session store consumption) via multiple requests with unique session keys.",2015-07-14 17:59:00,-,2017-09-22 01:29:00,2024-03-19 16:52:18.586527,2.0,10.0,6.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,COMPLETE,7.8,,True,django,Direct,django,,,False,"[1.4.20,1.4.21),[1.5,1.6.11),[1.7,1.7.10),[1.8.1,1.8.3)",CWE-399,111.0,117,-6.0,2015-07-08 19:56:26,1.4.21,True,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
150409,CVE-2015-5144,"Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 uses an incorrect regular expression, which allows remote attackers to inject arbitrary headers and conduct HTTP response splitting attacks via a newline character in an (1) email message to the EmailValidator, a (2) URL to the URLValidator, or unspecified vectors to the (3) validate_ipv4_address or (4) validate_slug validator.",2015-07-14 17:59:00,django.core,2017-09-22 01:29:00,2024-03-19 16:52:18.645855,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,False,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.2,1.4.20],[1.5,1.6.11),[1.7,1.7.10),[1.8,1.8.3)",CWE-20,1877.0,1883,-6.0,2015-07-08 19:56:26,1.4.20,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
150410,CVE-2015-5145,validators.URLValidator in Django 1.8.x before 1.8.3 allows remote attackers to cause a denial of service (CPU consumption) via unspecified vectors.,2015-07-14 17:59:00,django.core,2017-09-22 01:29:00,2024-03-19 16:52:18.704988,2.0,10.0,6.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,COMPLETE,7.8,,True,django,Direct,django,,,False,"[1.8.0,1.8),[1.8.1,1.8.3)",CWE-399,1780.0,1883,-104.0,2015-04-01 20:12:37,1.8,True,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
151149,CVE-2015-5963,"contrib.sessions.middleware.SessionMiddleware in Django 1.8.x before 1.8.4, 1.7.x before 1.7.10, 1.4.x before 1.4.22, and possibly other versions allows remote attackers to cause a denial of service (session store consumption or session record removal) via a large number of requests to contrib.auth.views.logout, which triggers the creation of an empty session record.",2015-08-24 14:59:00,django.contrib,2017-10-03 01:29:00,2024-03-19 16:52:36.267114,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.15),[1.4.17,1.4.18),[1.4.19,1.4.22),[1.7,1.7.10),[1.8,1.8.4)",CWE-399,262.0,1248,-987.0,2012-12-10 21:46:28,1.4.3,True,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
151150,CVE-2015-5964,"The (1) contrib.sessions.backends.base.SessionBase.flush and (2) cache_db.SessionStore.flush functions in Django 1.7.x before 1.7.10, 1.4.x before 1.4.22, and possibly other versions create empty sessions in certain circumstances, which allows remote attackers to cause a denial of service (session store consumption) via unspecified vectors.",2015-08-24 14:59:00,django.contrib,2016-12-24 02:59:00,2024-03-19 16:52:36.342965,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.15),[1.4.17,1.4.18),[1.4.19,1.4.22),[1.7,1.7.10),[1.8,1.8.4)",CWE-399,262.0,1248,-987.0,2012-12-10 21:46:28,1.4.3,True,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
152863,CVE-2015-8213,"The get_format function in utils/formats.py in Django before 1.7.x before 1.7.11, 1.8.x before 1.8.7, and 1.9.x before 1.9rc2 might allow remote attackers to obtain sensitive application secrets via a settings key in place of a date/time format setting, as demonstrated by SECRET_KEY.",2015-12-07 20:59:00,django.utils,2016-12-07 18:26:00,2024-03-19 16:53:22.011116,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,NONE,NONE,5.0,,True,django,Direct,django,,,False,"[1.2,1.7.10],[1.8.0,1.8),[1.8.1,1.8.7)",CWE-200,2016.0,2030,-14.0,2015-11-24 17:19:47,1.7.10,False,weakness,Exposure of Sensitive Information to an Unauthorized Actor,Class,Simple,Draft,,,High,,Read Application Data (C.),"['CVE-2013-0305', 'CVE-2015-8213', 'CVE-2016-2513', 'CVE-2018-6188']"
154474,CVE-2014-0472,"The django.core.urlresolvers.reverse function in Django before 1.4.11, 1.5.x before 1.5.6, 1.6.x before 1.6.3, and 1.7.x before 1.7 beta 2 allows remote attackers to import and execute arbitrary Python modules by leveraging a view that constructs URLs using user input and a ""dotted Python path.""",2014-04-23 15:55:00,django.core,2017-01-07 02:59:00,2024-03-19 17:51:54.561382,2.0,4.9,6.4,,NETWORK,HIGH,NONE,False,UNCHANGED,PARTIAL,PARTIAL,PARTIAL,5.1,,True,django,Direct,django,,,False,"[1.2,1.4.10],[1.4,1.4.10),[1.5,1.5.6),[1.6,1.6.3),[1.7,1.7.1)",CWE-94,1435.0,1436,-2.0,2014-04-21 22:40:17,1.4.10,False,weakness,Improper Control of Generation of Code ('Code Injection'),Base,Simple,Draft,,,Medium,Automated Static Analysis (DM-14),Bypass Protection Mechanism (.); Execute Unauthorized Code or Commands (C.I.A.); Gain Privileges or Assume Identity (.); Hide Activities (.),['CVE-2014-0472']
154475,CVE-2014-0473,"The caching framework in Django before 1.4.11, 1.5.x before 1.5.6, 1.6.x before 1.6.3, and 1.7.x before 1.7 beta 2 reuses a cached CSRF token for all anonymous users, which allows remote attackers to bypass CSRF protections by reading the CSRF cookie for anonymous users.",2014-04-23 15:55:00,-,2017-01-07 02:59:00,2024-03-19 17:51:54.598132,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,NONE,NONE,5.0,,True,django,Direct,django,,,False,"[1.2,1.4.10],[1.4,1.4.10),[1.5,1.5.6),[1.6,1.6.3),[1.7,1.7.1)",,1435.0,1436,-2.0,2014-04-21 22:40:17,1.4.10,False,,,,,,,,,,,
154476,CVE-2014-0474,"The (1) FilePathField, (2) GenericIPAddressField, and (3) IPAddressField model field classes in Django before 1.4.11, 1.5.x before 1.5.6, 1.6.x before 1.6.3, and 1.7.x before 1.7 beta 2 do not properly perform type conversion, which allows remote attackers to have unspecified impact and vectors, related to ""MySQL typecasting.""",2014-04-23 15:55:00,django.db,2017-01-07 02:59:00,2024-03-19 17:51:54.634593,2.0,10.0,10.0,,NETWORK,LOW,NONE,False,UNCHANGED,COMPLETE,COMPLETE,COMPLETE,10.0,,True,django,Direct,django,,,False,"[1.2,1.4.10],[1.4,1.4.10),[1.5,1.5.6),[1.6,1.6.3),[1.7,1.7.1)",CWE-399,1435.0,1436,-2.0,2014-04-21 22:40:17,1.4.10,False,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
154482,CVE-2014-0480,"The core.urlresolvers.reverse function in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not properly validate URLs, which allows remote attackers to conduct phishing attacks via a // (slash slash) in a URL, which triggers a scheme-relative URL to be generated.",2014-08-26 14:55:00,django.core,2018-10-30 16:27:00,2024-03-19 17:51:54.806967,2.0,8.6,4.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,PARTIAL,PARTIAL,NONE,5.8,,True,django,Direct,django,,,False,"[1.2,1.4.13],[1.4,1.4.3),[1.4.4,1.4.13),[1.5,1.5.9),[1.6,1.6.6),[1.7,1.7.1)",CWE-20,1555.0,1561,-6.0,2014-08-20 20:01:35,1.4.13,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
154483,CVE-2014-0481,"The default configuration for the file upload handling system in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 uses a sequential file name generation process when a file with a conflicting name is uploaded, which allows remote attackers to cause a denial of service (CPU consumption) by unloading a multiple files with the same name.",2014-08-26 14:55:00,-,2018-10-30 16:27:00,2024-03-19 17:51:54.856544,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,4.3,,True,django,Direct,django,,,False,"[1.2,1.4.13],[1.4,1.4.3),[1.4.4,1.4.13),[1.5,1.5.9),[1.6,1.6.6),[1.7,1.7.1)",CWE-399,1555.0,1561,-6.0,2014-08-20 20:01:35,1.4.13,False,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
154484,CVE-2014-0482,"The contrib.auth.middleware.RemoteUserMiddleware middleware in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3, when using the contrib.auth.backends.RemoteUserBackend backend, allows remote authenticated users to hijack web sessions via vectors related to the REMOTE_USER header.",2014-08-26 14:55:00,django.contrib,2018-10-30 16:27:00,2024-03-19 17:51:54.905128,2.0,6.8,6.4,,NETWORK,MEDIUM,SINGLE,False,UNCHANGED,PARTIAL,PARTIAL,PARTIAL,6.0,,True,django,Direct,django,,,False,"[1.2,1.4.13],[1.4,1.4.3),[1.4.4,1.4.13),[1.5,1.5.9),[1.6,1.6.6),[1.7,1.7.1)",CWE-287,1555.0,1561,-6.0,2014-08-20 20:01:35,1.4.13,False,weakness,Improper Authentication,Class,Simple,Draft,,,High,Automated Static Analysis (DM-6); Manual Static Analysis (DM-7),Read Application Data-Gain Privileges or Assume Identity-Execute Unauthorized Code or Commands (C.I.A.),"['CVE-2013-1443', 'CVE-2014-0482']"
154485,CVE-2014-0483,"The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI.",2014-08-26 14:55:00,django.contrib,2018-10-30 16:27:00,2024-03-19 17:51:54.953436,2.0,6.8,2.9,,NETWORK,MEDIUM,SINGLE,False,UNCHANGED,PARTIAL,NONE,NONE,3.5,,True,django,Direct,django,,,False,"[1.2,1.4.13],[1.4,1.4.3),[1.4.4,1.4.13),[1.5,1.5.9),[1.6,1.6.6),[1.7,1.7.1)",,1555.0,1561,-6.0,2014-08-20 20:01:35,1.4.13,False,,,,,,,,,,,
155366,CVE-2014-1418,"Django 1.4 before 1.4.13, 1.5 before 1.5.8, 1.6 before 1.6.5, and 1.7 before 1.7b4 does not properly include the (1) Vary: Cookie or (2) Cache-Control header in responses, which allows remote attackers to obtain sensitive information or poison the cache via a request from certain browsers.",2014-05-16 15:55:00,-,2017-01-07 02:59:00,2024-03-19 17:52:21.573110,2.0,10.0,4.9,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,PARTIAL,NONE,6.4,,False,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.13),[1.5,1.5.8),[1.6,1.6.5),[1.7,1.7.1)",,262.0,783,-522.0,2012-12-10 21:46:28,1.4.3,True,,,,,,,,,,,
157304,CVE-2014-3730,"The django.util.http.is_safe_url function in Django 1.4 before 1.4.13, 1.5 before 1.5.8, 1.6 before 1.6.5, and 1.7 before 1.7b4 does not properly validate URLs, which allows remote attackers to conduct open redirect attacks via a malformed URL, as demonstrated by ""http:\\\djangoproject.com.""",2014-05-16 15:55:00,django.util,2018-10-30 16:27:00,2024-03-19 17:53:20.436466,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.13),[1.5,1.5.8),[1.6,1.6.5),[1.7,1.7.1)",CWE-20,262.0,783,-522.0,2012-12-10 21:46:28,1.4.3,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
162664,CVE-2013-0305,"The administrative interface for Django 1.3.x before 1.3.6, 1.4.x before 1.4.4, and 1.5 before release candidate 2 does not check permissions for the history view, which allows remote authenticated administrators to obtain sensitive object history information.",2013-05-02 14:55:00,-,2013-05-15 03:34:00,2024-03-19 17:55:40.954508,2.0,8.0,2.9,,NETWORK,LOW,SINGLE,False,UNCHANGED,PARTIAL,NONE,NONE,4.0,,True,django,Direct,django,,,False,"[1.3,1.3.4),[1.4,1.4.3),[1.5,1.5.1)",CWE-200,713.0,771,-58.0,2013-03-05 22:33:47,1.3.4,True,weakness,Exposure of Sensitive Information to an Unauthorized Actor,Class,Simple,Draft,,,High,,Read Application Data (C.),"['CVE-2013-0305', 'CVE-2015-8213', 'CVE-2016-2513', 'CVE-2018-6188']"
162665,CVE-2013-0306,"The form library in Django 1.3.x before 1.3.6, 1.4.x before 1.4.4, and 1.5 before release candidate 2 allows remote attackers to bypass intended resource limits for formsets and cause a denial of service (memory consumption) or trigger server errors via a modified max_num parameter.",2013-05-02 14:55:00,-,2013-05-15 03:34:00,2024-03-19 17:55:40.989661,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.3,1.3.4),[1.4,1.4.3),[1.5,1.5.1)",CWE-189,713.0,771,-58.0,2013-03-05 22:33:47,1.3.4,True,category,Numeric Errors,,,Draft,,,,,,['CVE-2013-0306']
163718,CVE-2013-1443,"The authentication framework (django.contrib.auth) in Django 1.4.x before 1.4.8, 1.5.x before 1.5.4, and 1.6.x before 1.6 beta 4 allows remote attackers to cause a denial of service (CPU consumption) via a long password which is then hashed.",2013-09-23 20:55:00,django.contrib,2014-01-28 04:51:00,2024-03-19 17:56:25.086460,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.8),[1.5,1.5.4),[1.6,1.6.1)",CWE-287,262.0,549,-287.0,2012-12-10 21:46:28,1.4.3,True,weakness,Improper Authentication,Class,Simple,Draft,,,High,Automated Static Analysis (DM-6); Manual Static Analysis (DM-7),Read Application Data-Gain Privileges or Assume Identity-Execute Unauthorized Code or Commands (C.I.A.),"['CVE-2013-1443', 'CVE-2014-0482']"
166181,CVE-2013-4249,Cross-site scripting (XSS) vulnerability in the AdminURLFieldWidget widget in contrib/admin/widgets.py in Django 1.5.x before 1.5.2 and 1.6.x before 1.6 beta 2 allows remote attackers to inject arbitrary web script or HTML via a URLField.,2013-10-04 17:55:00,django.contrib,2017-08-29 01:33:00,2024-03-19 17:58:01.742120,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.5,1.5.2),[1.6,1.6.1)",CWE-79,167.0,219,-53.0,2013-08-13 16:54:03,1.5.2,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
166241,CVE-2013-4315,"Directory traversal vulnerability in Django 1.4.x before 1.4.7, 1.5.x before 1.5.3, and 1.6.x before 1.6 beta 3 allows remote attackers to read arbitrary files via a file path in the ALLOWED_INCLUDE_ROOTS setting followed by a .. (dot dot) in a ssi template tag.",2013-09-16 19:14:00,-,2013-12-10 06:05:00,2024-03-19 17:58:04.075259,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,NONE,NONE,5.0,,True,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.7),[1.5,1.5.2),[1.6,1.6.1)",CWE-22,262.0,542,-280.0,2012-12-10 21:46:28,1.4.3,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
167615,CVE-2013-6044,"The is_safe_url function in utils/http.py in Django 1.4.x before 1.4.6, 1.5.x before 1.5.2, and 1.6 before beta 2 treats a URL's scheme as safe even if it is not HTTP or HTTPS, which might introduce cross-site scripting (XSS) or other vulnerabilities into Django applications that use this function, as demonstrated by ""the login view in django.contrib.auth.views"" and the javascript: scheme.",2013-10-04 17:55:00,django.contrib,2017-11-17 02:29:00,2024-03-19 17:58:53.369423,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.4,1.4.3),[1.4.4,1.4.6),[1.5,1.5.2),[1.6,1.6.1)",CWE-79,262.0,559,-298.0,2012-12-10 21:46:28,1.4.3,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
171592,CVE-2012-3442,"The (1) django.http.HttpResponseRedirect and (2) django.http.HttpResponsePermanentRedirect classes in Django before 1.3.2 and 1.4.x before 1.4.1 do not validate the scheme of a redirect target, which might allow remote attackers to conduct cross-site scripting (XSS) attacks via a data: URL.",2012-07-31 17:55:00,django.http,2013-04-11 03:29:00,2024-03-19 18:01:16.445628,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.2,1.3],[0.95,1.0.3),[1.1,1.1.1),[1.1.2,1.2.1),[1.2.2,1.2.3),[1.2.4,1.3.1),[1.4,1.4.1)",CWE-79,480.0,805,-326.0,2011-09-10 03:36:21,1.3,False,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
171593,CVE-2012-3443,"The django.forms.ImageField class in the form system in Django before 1.3.2 and 1.4.x before 1.4.1 completely decompresses image data during image validation, which allows remote attackers to cause a denial of service (memory consumption) by uploading an image file.",2012-07-31 17:55:00,django.forms,2013-04-11 03:29:00,2024-03-19 18:01:16.487854,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.2,1.3],[0.95,1.0.3),[1.1,1.1.1),[1.1.2,1.2.1),[1.2.2,1.2.3),[1.2.4,1.3.1),[1.4,1.4.1)",CWE-20,480.0,805,-326.0,2011-09-10 03:36:21,1.3,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
171594,CVE-2012-3444,"The get_image_dimensions function in the image-handling functionality in Django before 1.3.2 and 1.4.x before 1.4.1 uses a constant chunk size in all attempts to determine dimensions, which allows remote attackers to cause a denial of service (process or thread consumption) via a large TIFF image.",2012-07-31 17:55:00,django.core,2013-04-11 03:29:00,2024-03-19 18:01:16.524752,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.2,1.3],[0.95,1.0.3),[1.1,1.1.1),[1.1.2,1.2.1),[1.2.2,1.2.3),[1.2.4,1.3.1),[1.4,1.4.1)",CWE-119,480.0,805,-326.0,2011-09-10 03:36:21,1.3,False,weakness,Improper Restriction of Operations within the Bounds of a Memory Buffer,Class,Simple,Stable,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1),"Execute Unauthorized Code or Commands-Modify Memory (C.I.A.); Read Memory (C.); Read Memory-DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (C.A.)",['CVE-2012-3444']
172483,CVE-2012-4520,The django.http.HttpRequest.get_host function in Django 1.3.x before 1.3.4 and 1.4.x before 1.4.2 allows remote attackers to generate and display arbitrary URLs via crafted username and password Host header values.,2012-11-18 23:55:00,django.http,2013-05-04 03:20:00,2024-03-19 18:02:03.606795,2.0,10.0,4.9,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,PARTIAL,NONE,6.4,,True,django,Direct,django,,,False,"[1.3,1.3.4),[1.4,1.4.2)",CWE-20,713.0,606,106.0,2013-03-05 22:33:47,1.3.4,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
174649,CVE-2011-0696,"Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 does not properly validate HTTP requests that contain an X-Requested-With header, which makes it easier for remote attackers to conduct cross-site request forgery (CSRF) attacks via forged AJAX requests that leverage a ""combination of browser plugins and redirects,"" a related issue to CVE-2011-0447.",2011-02-14 21:00:00,-,2011-03-11 03:51:00,2024-03-19 18:03:28.839069,2.0,8.6,6.4,,NETWORK,MEDIUM,NONE,True,UNCHANGED,PARTIAL,PARTIAL,PARTIAL,6.8,,True,django,Direct,django,,,False,"[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.5)",CWE-352,72.0,565,-493.0,2009-10-09 23:06:09,1.1.1,True,weakness,Cross-Site Request Forgery (CSRF),Compound,Composite,Stable,,,Medium,Manual Analysis (DM-7),"Gain Privileges or Assume Identity-Bypass Protection Mechanism-Read Application Data-Modify Application Data-DoS: Crash, Exit, or Restart (C.I.A.)","['CVE-2011-0696', 'CVE-2011-4140']"
174650,CVE-2011-0697,Cross-site scripting (XSS) vulnerability in Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 might allow remote attackers to inject arbitrary web script or HTML via a filename associated with a file upload.,2011-02-14 21:00:00,-,2011-03-11 03:51:00,2024-03-19 18:03:28.861253,2.0,8.6,2.9,,NETWORK,MEDIUM,NONE,True,UNCHANGED,NONE,PARTIAL,NONE,4.3,,True,django,Direct,django,,,False,"[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.5)",CWE-79,72.0,565,-493.0,2009-10-09 23:06:09,1.1.1,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),"['CVE-2011-0697', 'CVE-2012-3442', 'CVE-2013-4249', 'CVE-2013-6044', 'CVE-2015-0220', 'CVE-2015-2241', 'CVE-2015-2317', 'CVE-2016-2512', 'CVE-2016-6186', 'CVE-2017-12794', 'CVE-2019-12308', 'CVE-2020-13596', 'CVE-2021-32052', 'CVE-2022-22818']"
174651,CVE-2011-0698,"Directory traversal vulnerability in Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 on Windows might allow remote attackers to read or execute files via a / (slash) character in a key in a session cookie, related to session replays.",2011-02-14 21:00:00,-,2011-02-23 06:48:00,2024-03-19 18:03:28.883625,2.0,10.0,6.4,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,PARTIAL,PARTIAL,7.5,,True,django,Direct,django,,,False,"[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.5)",CWE-22,72.0,565,-493.0,2009-10-09 23:06:09,1.1.1,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)","['CVE-2011-0698', 'CVE-2013-4315', 'CVE-2021-28658', 'CVE-2021-31542', 'CVE-2021-3281', 'CVE-2021-33203', 'CVE-2021-45452']"
177702,CVE-2011-4136,"django.contrib.sessions in Django before 1.2.7 and 1.3.x before 1.3.1, when session data is stored in the cache, uses the root namespace for both session identifiers and application-data keys, which allows remote attackers to modify a session by triggering use of a key that is equal to that session's identifier.",2011-10-19 10:55:00,django.contrib,2018-01-18 02:29:00,2024-03-19 18:05:26.324579,2.0,8.6,4.9,,NETWORK,MEDIUM,NONE,False,UNCHANGED,NONE,PARTIAL,PARTIAL,5.8,,True,django,Direct,django,,,False,"[1.2,1.2.6],[0.91,1.0.3),[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.6),[1.3,1.3.1)",CWE-20,481.0,519,-39.0,2011-09-11 03:05:18,1.2.6,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
177703,CVE-2011-4137,"The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521.",2011-10-19 10:55:00,django.forms,2018-01-18 02:29:00,2024-03-19 18:05:26.355714,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,NONE,PARTIAL,5.0,,True,django,Direct,django,,,False,"[1.2,1.2.6],[0.91,1.0.3),[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.6),[1.3,1.3.1)",CWE-399,481.0,519,-39.0,2011-09-11 03:05:18,1.2.6,False,category,Resource Management Errors,,,Draft,,,,,,"['CVE-2011-4137', 'CVE-2014-0474', 'CVE-2014-0481', 'CVE-2015-0221', 'CVE-2015-2316', 'CVE-2015-5143', 'CVE-2015-5145', 'CVE-2015-5963', 'CVE-2015-5964']"
177704,CVE-2011-4138,"The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 originally tests a URL's validity through a HEAD request, but then uses a GET request for the new target URL in the case of a redirect, which might allow remote attackers to trigger arbitrary GET requests with an unintended source IP address via a crafted Location header.",2011-10-19 10:55:00,django.forms,2018-01-18 02:29:00,2024-03-19 18:05:26.387598,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,PARTIAL,NONE,NONE,5.0,,True,django,Direct,django,,,False,"[1.2,1.2.6],[0.91,1.0.3),[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.6),[1.3,1.3.1)",CWE-20,481.0,519,-39.0,2011-09-11 03:05:18,1.2.6,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
177705,CVE-2011-4139,"Django before 1.2.7 and 1.3.x before 1.3.1 uses a request's HTTP Host header to construct a full URL in certain circumstances, which allows remote attackers to conduct cache poisoning attacks via a crafted request.",2011-10-19 10:55:00,-,2018-01-18 02:29:00,2024-03-19 18:05:26.419086,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,PARTIAL,NONE,5.0,,True,django,Direct,django,,,False,"[1.2,1.2.6],[0.91,1.0.3),[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.6),[1.3,1.3.1)",CWE-20,481.0,519,-39.0,2011-09-11 03:05:18,1.2.6,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)","['CVE-2011-4136', 'CVE-2011-4138', 'CVE-2011-4139', 'CVE-2012-3443', 'CVE-2012-4520', 'CVE-2014-0480', 'CVE-2014-3730', 'CVE-2015-5144', 'CVE-2021-45116', 'CVE-2023-31047']"
177706,CVE-2011-4140,"The CSRF protection mechanism in Django through 1.2.7 and 1.3.x through 1.3.1 does not properly handle web-server configurations supporting arbitrary HTTP Host headers, which allows remote attackers to trigger unauthenticated forged requests via vectors involving a DNS CNAME record and a web page containing JavaScript code.",2011-10-19 10:55:00,-,2018-01-18 02:29:00,2024-03-19 18:05:26.449896,2.0,8.6,6.4,,NETWORK,MEDIUM,NONE,True,UNCHANGED,PARTIAL,PARTIAL,PARTIAL,6.8,,True,django,Direct,django,,,False,"[1.2,1.2.6],[0.91,1.0.3),[1.1,1.1.1),[1.1.2,1.1.4),[1.2,1.2.6),[1.3,1.3.1)",CWE-352,481.0,519,-39.0,2011-09-11 03:05:18,1.2.6,False,weakness,Cross-Site Request Forgery (CSRF),Compound,Composite,Stable,,,Medium,Manual Analysis (DM-7),"Gain Privileges or Assume Identity-Bypass Protection Mechanism-Read Application Data-Modify Application Data-DoS: Crash, Exit, or Restart (C.I.A.)","['CVE-2011-0696', 'CVE-2011-4140']"
11929,CVE-2023-30608,"sqlparse is a non-validating SQL parser module for Python. In affected versions the SQL parser contains a regular expression that is vulnerable to ReDoS (Regular Expression Denial of Service). This issue was introduced by commit `e75e358`. The vulnerability may lead to Denial of Service (DoS). This issues has been fixed in sqlparse 0.4.4 by commit `c457abd5f`. Users are advised to upgrade. There are no known workarounds for this issue.
",2023-04-18 22:15:00,sqlparse.,2023-06-14 18:14:00,2024-03-19 14:58:21.262833,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Indirect,sqlparse,>=0.3.1,,False,"[0.1.15,0.4.4)",CWE-1333,2924.0,2925,-1.0,2023-04-18 08:30:36,0.4.4,True,weakness,Inefficient Regular Expression Complexity,Base,Simple,Draft,,,High,,DoS: Resource Consumption (CPU) (A.),['CVE-2023-30608']
62018,CVE-2021-32839,sqlparse is a non-validating SQL parser module for Python. In sqlparse versions 0.4.0 and 0.4.1 there is a regular Expression Denial of Service in sqlparse vulnerability. The regular expression may cause exponential backtracking on strings containing many repetitions of '\r\n' in SQL comments. Only the formatting feature that removes comments from SQL statements is affected by this regular expression. As a workaround don't use the sqlformat.format function with keyword strip_comments=True or the --strip-comments command line flag when using the sqlformat command line tool. The issues has been fixed in sqlparse 0.4.2.,2021-09-20 17:15:00,sqlparse.sqlformat,2021-09-29 15:04:00,2024-03-19 15:25:53.794685,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,django,Indirect,sqlparse,>=0.3.1,,False,"[0.4.0,0.4.2)",CWE-400,337.0,348,-11.0,2021-09-10 06:51:56,0.4.2,True,weakness,Uncontrolled Resource Consumption,Class,Simple,Draft,,,High,,"Bypass Protection Mechanism-Other (.); DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.)",['CVE-2021-32839']
12166,CVE-2023-30861,"Flask is a lightweight WSGI web application framework. When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by the proxy to other clients. If the proxy also caches `Set-Cookie` headers, it may send one client's `session` cookie to other clients. The severity depends on the application's use of the session and the proxy's behavior regarding cookies. The risk depends on all these conditions being met.

1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.
2. The application sets `session.permanent = True`
3. The application does not access or modify the session at any point during a request.
4. `SESSION_REFRESH_EACH_REQUEST` enabled (the default).
5. The application does not set a `Cache-Control` header to indicate that a page is private or should not be cached.

This happens because vulnerable versions of Flask only set the `Vary: Cookie` header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified. This issue has been fixed in versions 2.3.2 and 2.2.5.",2023-05-02 18:15:00,,2023-08-20 21:15:00,2024-03-19 14:58:28.881205,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,flask,Direct,flask,,,False,"[0.10,2.2.5),[2.3.0,2.3.2)",CWE-539,3610.0,3610,-1.0,2023-05-02 14:42:34,2.2.5,True,weakness,Use of Persistent Cookies Containing Sensitive Information,Variant,Simple,Incomplete,,,,Automated Static Analysis (DM-14),Read Application Data (C.),['CVE-2023-30861']
91775,CVE-2019-1010083,The Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1. NOTE: this may overlap CVE-2018-1000656.,2019-07-17 14:15:00,,2020-08-24 17:37:00,2024-03-19 16:25:38.055181,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,False,flask,Direct,flask,,,False,"[0.10,1.0)",,1778.0,2225,-447.0,2018-04-26 20:12:52,1.0,True,,,,,,,,,,,
107577,CVE-2018-1000656,The Pallets Project flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3. NOTE: this may overlap CVE-2019-1010083.,2018-08-20 19:31:00,,2020-06-09 22:15:00,2024-03-19 16:33:22.665460,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,flask,Direct,flask,,,False,"[0.10,0.12.3)",CWE-20,1778.0,1894,-116.0,2018-04-26 20:12:32,0.12.3,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)",['CVE-2018-1000656']
1103,CVE-2024-22195,"Jinja is an extensible templating engine. Special placeholders in the template allow writing code similar to Python syntax. It is possible to inject arbitrary HTML attributes into the rendered HTML template, potentially leading to Cross-Site Scripting (XSS). The Jinja `xmlattr` filter can be abused to inject arbitrary HTML attribute keys and values, bypassing the auto escaping mechanism and potentially leading to XSS. It may also be possible to bypass attribute validation checks if they are blacklist-based.
",2024-01-11 03:15:00,jinja2.,2024-01-27 03:15:00,2024-03-19 14:51:13.539125,3.1,2.8,2.7,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,flask,Indirect,jinja2,>=3.1.2,,False,"[2.0,3.1.3)",CWE-79,5655.0,5655,-1.0,2024-01-10 23:12:19,3.1.3,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),['CVE-2024-22195']
83668,CVE-2020-28493,"This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory.",2021-02-01 20:15:00,,2023-11-07 03:21:00,2024-03-19 15:39:52.395808,3.1,3.9,1.4,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,LOW,5.3,MEDIUM,True,flask,Indirect,jinja2,>=3.1.2,,False,"[2.0,2.11.3)",CWE-400,4580.0,4581,-2.0,2021-01-31 16:33:07,2.11.3,True,weakness,Uncontrolled Resource Consumption,Class,Simple,Draft,,,High,,"Bypass Protection Mechanism-Other (.); DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.)",['CVE-2020-28493']
92679,CVE-2019-10906,"In Pallets Jinja before 2.10.1, str.format_map allows a sandbox escape.",2019-04-07 00:29:00,jinja2.str,2023-11-07 03:02:00,2024-03-19 16:26:18.287014,3.1,3.9,4.0,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,CHANGED,HIGH,NONE,NONE,8.6,HIGH,False,flask,Indirect,jinja2,>=3.1.2,,False,"[2.0,2.10.1)",,3914.0,3915,-1.0,2019-04-06 18:59:59,2.10.1,True,,,,,,,,,,,
138440,CVE-2016-10745,"In Pallets Jinja before 2.8.1, str.format allows a sandbox escape.",2019-04-08 13:29:00,jinja2.str,2019-06-06 16:29:00,2024-03-19 16:47:00.808754,3.0,3.9,4.0,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,CHANGED,HIGH,NONE,NONE,8.6,HIGH,True,flask,Indirect,jinja2,>=3.1.2,,False,"[2.0,2.8.1)",CWE-134,3086.0,3916,-831.0,2016-12-29 13:16:24,2.8.1,True,weakness,Use of Externally-Controlled Format String,Base,Simple,Draft,,,High,Automated Static Analysis (DM-1),Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory (C.),['CVE-2016-10745']
6987,CVE-2023-23934,"Werkzeug is a comprehensive WSGI web application library. Browsers may allow ""nameless"" cookies that look like `=value` instead of `key=value`. A vulnerable browser may allow a compromised application on an adjacent subdomain to exploit this to set a cookie like `=__Host-test=bad` for another subdomain. Werkzeug prior to 2.2.3 will parse the cookie `=__Host-test=bad` as __Host-test=bad`. If a Werkzeug application is running next to a vulnerable or malicious subdomain which sets such a cookie using a vulnerable browser, the Werkzeug application will see the bad cookie value but the valid cookie key. The issue is fixed in Werkzeug 2.2.3.",2023-02-14 20:15:00,-,2023-08-18 14:15:00,2024-03-19 14:55:01.525717,3.1,2.1,1.4,CVSS:3.1/AV:A/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N,ADJACENT_NETWORK,LOW,NONE,REQUIRED,UNCHANGED,NONE,LOW,NONE,3.5,LOW,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,2.2.3)",CWE-20,3532.0,3532,-1.0,2023-02-14 17:18:42,2.2.3,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)",['CVE-2023-23934']
8200,CVE-2023-25577,"Werkzeug is a comprehensive WSGI web application library. Prior to version 2.2.3, Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses `request.data`, `request.form`, `request.files`, or `request.get_data(parse_form_data=False)`, it can cause unexpectedly high resource usage. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers. Version 2.2.3 contains a patch for this issue.",2023-02-14 20:15:00,werkzeug.request,2023-08-18 14:15:00,2024-03-19 14:55:35.535453,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,2.2.3)",CWE-770,3532.0,3532,-1.0,2023-02-14 17:18:42,2.2.3,True,weakness,Allocation of Resources Without Limits or Throttling,Base,Simple,Incomplete,,,High,Manual Static Analysis (DM-8),DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Resource Consumption (Other) (A.),['CVE-2023-25577']
21909,CVE-2023-46136,Werkzeug is a comprehensive WSGI web application library. If an upload of a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. This vulnerability has been patched in version 3.0.1.,2023-10-25 18:17:00,werkzeug.,2024-01-10 18:58:00,2024-03-19 15:03:31.793793,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,2.3.8),[3.0.0,3.0.1)",CWE-787,3799.0,3785,14.0,2023-11-08 18:37:01,2.3.8,True,weakness,Out-of-bounds Write,Base,Simple,Draft,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1),"Modify Memory-DoS: Crash, Exit, or Restart-Execute Unauthorized Code or Commands (I.A.)",['CVE-2023-46136']
36786,CVE-2022-29361,Improper parsing of HTTP requests in Pallets Werkzeug v2.1.0 and below allows attackers to perform HTTP Request Smuggling using a crafted HTTP request with multiple requests included inside the body. NOTE: the vendor's position is that this behavior can only occur in unsupported configurations involving development mode and an HTTP server from outside the Werkzeug project,2022-05-25 01:15:00,werkzeug.,2023-11-07 03:46:00,2024-03-19 15:10:46.622119,3.1,3.9,5.9,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,2.1.0]",CWE-444,3213.0,3266,-54.0,2022-04-01 16:01:11,2.1.0,False,weakness,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),Base,Simple,Incomplete,,,,,Unexpected State-Hide Activities-Bypass Protection Mechanism (I.),['CVE-2022-29361']
83791,CVE-2020-28724,Open redirect vulnerability in werkzeug before 0.11.6 via a double slash in the URL.,2020-11-18 15:15:00,-,2020-12-01 16:05:00,2024-03-19 15:39:54.960483,3.1,2.8,2.7,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,0.11.6)",CWE-601,1035.0,2714,-1680.0,2016-04-14 13:48:58,0.11.6,True,weakness,URL Redirection to Untrusted Site ('Open Redirect'),Base,Simple,Draft,,{'Background_Detail': 'Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.'},Low,Automated Static Analysis (DM-14); Manual Static Analysis (DM-10),Bypass Protection Mechanism-Gain Privileges or Assume Identity (.); Bypass Protection Mechanism-Gain Privileges or Assume Identity-Other (C.),['CVE-2020-28724']
95539,CVE-2019-14322,"In Pallets Werkzeug before 0.15.5, SharedDataMiddleware mishandles drive names (such as C:) in Windows pathnames.",2019-07-28 13:15:00,-,2023-01-31 20:18:00,2024-03-19 16:27:50.017905,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,0.15.5)",CWE-22,2224.0,2235,-11.0,2019-07-17 15:31:42,0.15.5,True,weakness,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),Base,Simple,Stable,,,High,,"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands (C.I.A.); Modify Files or Directories (I.); Read Files or Directories (C.)",['CVE-2019-14322']
95918,CVE-2019-14806,"Pallets Werkzeug before 0.15.3, when used with Docker, has insufficient debugger PIN randomness because Docker containers share the same machine id.",2019-08-09 15:15:00,-,2023-03-03 19:34:00,2024-03-19 16:28:05.854981,3.1,3.9,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,NONE,NONE,7.5,HIGH,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,0.15.3)",CWE-331,2160.0,2247,-87.0,2019-05-14 21:10:46,0.15.3,True,weakness,Insufficient Entropy,Base,Simple,Draft,,,,,Bypass Protection Mechanism-Other (.),['CVE-2019-14806']
138190,CVE-2016-10516,Cross-site scripting (XSS) vulnerability in the render_full function in debug/tbtools.py in the debugger in Pallets Werkzeug before 0.11.11 (as used in Pallets Flask and other products) allows remote attackers to inject arbitrary web script or HTML via a field that contains an exception message.,2017-10-23 16:29:00,werkzeug.debug,2018-02-04 02:29:00,2024-03-19 16:46:55.921016,3.0,2.8,2.7,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,flask,Indirect,werkzeug,>=3.0.0,,False,"[0.9.1,0.11.11)",CWE-79,1174.0,1592,-419.0,2016-08-31 13:13:17,0.11.11,True,weakness,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),Base,Simple,Stable,,"{'Background_Detail': {'xhtml:p': ['The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or ""origin"", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or ""origins"". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.', ""When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.""]}}",High,,Bypass Protection Mechanism-Read Application Data (C.); Execute Unauthorized Code or Commands (C.I.A.); Execute Unauthorized Code or Commands-Bypass Protection Mechanism-Read Application Data (C.I.A.),['CVE-2016-10516']
10333,CVE-2023-28370,Open redirect vulnerability in Tornado versions 6.3.1 and earlier allows a remote unauthenticated attacker to redirect a user to an arbitrary web site and conduct a phishing attack by having user access a specially crafted URL.,2023-05-25 10:15:00,tornado.,2023-06-01 13:04:00,2024-03-19 14:57:13.098594,3.1,2.8,2.7,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,NETWORK,LOW,NONE,REQUIRED,CHANGED,LOW,LOW,NONE,6.1,MEDIUM,True,tornado,Direct,tornado,,,False,"[1.0,6.3.2)",CWE-601,4677.0,4688,-12.0,2023-05-14 03:41:12,6.3.2,True,weakness,URL Redirection to Untrusted Site ('Open Redirect'),Base,Simple,Draft,,{'Background_Detail': 'Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.'},Low,Automated Static Analysis (DM-14); Manual Static Analysis (DM-10),Bypass Protection Mechanism-Gain Privileges or Assume Identity (.); Bypass Protection Mechanism-Gain Privileges or Assume Identity-Other (C.),['CVE-2023-28370']
162171,CVE-2014-9720,"Tornado before 3.2.2 sends arbitrary responses that contain a fixed CSRF token and may be sent with HTTP compression, which makes it easier for remote attackers to conduct a BREACH attack and determine this token via a series of crafted requests.",2020-01-24 18:15:00,tornado.,2020-01-28 16:42:00,2024-03-19 17:55:25.102632,3.1,2.8,3.6,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N,NETWORK,LOW,NONE,REQUIRED,UNCHANGED,HIGH,NONE,NONE,6.5,MEDIUM,True,tornado,Direct,tornado,,,False,"[1.0,3.2.2)",CWE-203,1411.0,3472,-2061.0,2014-06-04 03:40:48,3.2.2,True,weakness,Observable Discrepancy,Base,Simple,Incomplete,,,,,Read Application Data (C.); Read Application Data-Bypass Protection Mechanism (C.),['CVE-2014-9720']
170725,CVE-2012-2374,CRLF injection vulnerability in the tornado.web.RequestHandler.set_header function in Tornado before 2.2.1 allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via crafted input.,2012-05-23 20:55:00,tornado.web,2012-09-05 03:23:00,2024-03-19 18:00:47.159507,2.0,10.0,2.9,,NETWORK,LOW,NONE,False,UNCHANGED,NONE,PARTIAL,NONE,5.0,,True,tornado,Direct,tornado,,,False,"[1.0,2.2],[1.0,2.2)",CWE-20,1398.0,670,728.0,2014-05-22 01:35:53,2.2,False,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)",['CVE-2012-2374']
62392,CVE-2021-33430,"A Buffer Overflow vulnerability exists in NumPy 1.9.x in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. NOTE: The vendor does not agree this is a vulneraility; In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user",2021-12-17 19:15:00,,2023-11-07 03:35:00,2024-03-19 15:26:13.642755,3.1,1.6,3.6,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,NETWORK,HIGH,LOW,NONE,UNCHANGED,NONE,NONE,HIGH,5.3,MEDIUM,True,numpy,Direct,numpy,,,False,"[1.9.0,1.9.3]",CWE-120,400.0,2658,-2259.0,2015-10-12 16:10:30,1.9.3,False,weakness,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),Base,Simple,Incomplete,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),"Modify Memory-DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.)","['CVE-2021-33430', 'CVE-2021-41496']"
62869,CVE-2021-34141,"An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. NOTE: the vendor states that this reported code behavior is ""completely harmless.""",2021-12-17 19:15:00,,2023-02-24 15:35:00,2024-03-19 15:26:25.159178,3.1,3.9,1.4,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,LOW,5.3,MEDIUM,True,numpy,Direct,numpy,,,False,"[1.3.0,1.22.0)",CWE-697,4652.0,4638,14.0,2021-12-31 20:39:25,1.22.0,True,weakness,Incorrect Comparison,Pillar,Simple,Incomplete,,,,,Varies by Context (.),['CVE-2021-34141']
68398,CVE-2021-41495,"Null Pointer Dereference vulnerability exists in numpy.sort in NumPy &lt and 1.19 in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place",2021-12-17 20:15:00,,2023-11-07 03:38:00,2024-03-19 15:29:21.263854,3.1,1.6,3.6,CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,NETWORK,HIGH,LOW,NONE,UNCHANGED,NONE,NONE,HIGH,5.3,MEDIUM,True,numpy,Direct,numpy,,,False,"[1.3.0,1.19.0]",CWE-476,4124.0,4638,-514.0,2020-07-21 21:14:22,1.19.0,False,weakness,NULL Pointer Dereference,Base,Simple,Stable,,,Medium,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-14); Manual Dynamic Analysis (DM-12),"DoS: Crash, Exit, or Restart (A.); Execute Unauthorized Code or Commands-Read Memory-Modify Memory (C.I.A.)",['CVE-2021-41495']
68399,CVE-2021-41496,"Buffer overflow in the array_from_pyobj function of fortranobject.c in NumPy < 1.19, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally)",2021-12-17 20:15:00,,2023-11-07 03:38:00,2024-03-19 15:29:21.282297,3.1,1.8,3.6,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,LOCAL,LOW,LOW,NONE,UNCHANGED,NONE,NONE,HIGH,5.5,MEDIUM,True,numpy,Direct,numpy,,,False,"[1.3.0,1.19.0)",CWE-120,4093.0,4638,-545.0,2020-06-20 20:37:45,1.19.0,True,weakness,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),Base,Simple,Incomplete,,,High,Automated Dynamic Analysis (DM-2); Automated Static Analysis (DM-1); Manual Analysis (DM-9),"Modify Memory-DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.)","['CVE-2021-33430', 'CVE-2021-41496']"
103476,CVE-2019-6446,"An issue was discovered in NumPy 1.16.0 and earlier. It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call. NOTE: third parties dispute this issue because it is  a behavior that might have legitimate applications in (for example)  loading serialized Python object arrays from trusted and authenticated  sources",2019-01-16 05:29:00,,2023-11-07 03:13:00,2024-03-19 16:31:44.403675,3.0,3.9,5.9,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,HIGH,HIGH,HIGH,9.8,CRITICAL,True,numpy,Direct,numpy,,,False,"[1.3.0,1.16.0]",CWE-502,3587.0,3571,15.0,2019-01-31 23:34:59,1.16.0,False,weakness,Deserialization of Untrusted Data,Base,Simple,Draft,,"{'Background_Detail': 'Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (""serialization""), then extracting the serialized data to reconstruct the original object (""deserialization"").'}",Medium,Automated Static Analysis (DM-14),DoS: Resource Consumption (CPU) (A.); Modify Application Data-Unexpected State (I.); Varies by Context (.),['CVE-2019-6446']
125661,CVE-2017-12852,"The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.",2017-08-15 16:29:00,,2019-10-03 00:03:00,2024-03-19 16:40:56.366287,3.0,3.9,3.6,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,NETWORK,LOW,NONE,NONE,UNCHANGED,NONE,NONE,HIGH,7.5,HIGH,True,numpy,Direct,numpy,,,False,"[1.3.0,1.13.1]",CWE-835,3098.0,3053,45.0,2017-09-29 23:01:31,1.13.1,False,weakness,Loop with Unreachable Exit Condition ('Infinite Loop'),Base,Simple,Incomplete,,,,,DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory)-DoS: Amplification (A.),['CVE-2017-12852']
155721,CVE-2014-1858,__init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.,2018-01-08 19:29:00,,2018-01-30 14:44:00,2024-03-19 17:52:34.103046,3.0,1.8,3.6,CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N,LOCAL,LOW,LOW,NONE,UNCHANGED,NONE,HIGH,NONE,5.5,MEDIUM,True,numpy,Direct,numpy,,,False,"[1.3.0,1.8.1)",CWE-20,1814.0,3199,-1385.0,2014-03-25 23:19:20,1.8.1,True,weakness,Improper Input Validation,Class,Simple,Stable,,,High,Automated Static Analysis (DM-3); Fuzzing (DM-5); Manual Static Analysis (DM-4),"DoS: Crash, Exit, or Restart-DoS: Resource Consumption (CPU)-DoS: Resource Consumption (Memory) (A.); Modify Memory-Execute Unauthorized Code or Commands (C.I.A.); Read Memory-Read Files or Directories (C.)",['CVE-2014-1858']
155722,CVE-2014-1859,"(1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.",2018-01-08 19:29:00,,2019-04-22 17:48:00,2024-03-19 17:52:34.120223,3.0,1.8,3.6,CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N,LOCAL,LOW,LOW,NONE,UNCHANGED,NONE,HIGH,NONE,5.5,MEDIUM,True,numpy,Direct,numpy,,,False,"[1.3.0,1.8.0],[1.8.1,1.8.2)",CWE-59,1814.0,3199,-1385.0,2014-03-25 23:19:20,1.8.0,False,weakness,Improper Link Resolution Before File Access ('Link Following'),Base,Simple,Draft,,{'Background_Detail': 'Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms.'},Medium,,Execute Unauthorized Code or Commands (.); Read Files or Directories-Modify Files or Directories-Bypass Protection Mechanism (C.I.),['CVE-2014-1859']
